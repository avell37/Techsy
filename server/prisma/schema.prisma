generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  username  String
  email     String   @unique
  password  String?
  picture   String
  role      String   @default("User")
  basket    Basket?
  ratings   Rating[]

  @@map("user")
}

model Basket {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Device    Device[]

  @@map("basket")
}

model Device {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  name       String       @unique
  price      Int
  rating     Int          @default(0)
  img        String
  brandId    String?
  typeId     String?
  basketId   String?
  basket     Basket?      @relation(fields: [basketId], references: [id])
  Brand      Brand?       @relation(fields: [brandId], references: [id])
  Type       Type?        @relation(fields: [typeId], references: [id])
  deviceInfo DeviceInfo[]
  ratings    Rating[]

  @@map("device")
}

model DeviceInfo {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String
  description String
  deviceId    String?
  Device      Device?  @relation(fields: [deviceId], references: [id])

  @@map("device_info")
}

model Rating {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rate      Int
  userId    String?
  deviceId  String?
  comment   String?
  Device    Device?  @relation(fields: [deviceId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("rating")
}

model Brand {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  name      String      @unique
  brandType BrandType[]
  devices   Device[]
  types     Type[]      @relation("BrandToType")

  @@map("brand")
}

model Type {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  name      String      @unique
  BrandType BrandType[]
  devices   Device[]
  brands    Brand[]     @relation("BrandToType")

  @@map("type")
}

model BrandType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  typeId    String
  brandId   String
  Brand     Brand    @relation(fields: [brandId], references: [id])
  type      Type     @relation(fields: [typeId], references: [id])

  @@unique([typeId, brandId])
  @@map("brand_type")
}
