generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  username        String
  email           String           @unique
  password        String?
  picture         String
  role            String           @default("User")
  basket          Basket?
  reviews         Review[]
  favoriteDevices FavoriteDevice[]
  ShippingInfo    ShippingInfo[]
  Order           Order[]

  @@map("user")
}

model Basket {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Device       Device[]
  BasketDevice BasketDevice[]

  @@map("basket")
}

model BasketDevice {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  basketId  String
  deviceId  String
  quantity  Int      @default(1)

  basket Basket @relation(fields: [basketId], references: [id])
  device Device @relation(fields: [deviceId], references: [id])

  @@unique([basketId, deviceId])
  @@map("basket_device")
}

model Device {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  name            String           @unique
  price           Int
  rating          Int              @default(0)
  img             String
  brandId         String?
  typeId          String?
  basketId        String?
  basket          Basket?          @relation(fields: [basketId], references: [id])
  Brand           Brand?           @relation(fields: [brandId], references: [id])
  Type            Type?            @relation(fields: [typeId], references: [id])
  deviceInfo      DeviceInfo[]
  reviews         Review[]
  favoriteDevices FavoriteDevice[]
  BasketDevice    BasketDevice[]

  @@map("device")
}

model DeviceInfo {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String
  description String
  deviceId    String?
  Device      Device?  @relation(fields: [deviceId], references: [id])

  @@map("device_info")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rate      Int
  comment   String?
  userId    String
  deviceId  String
  Device    Device   @relation(fields: [deviceId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, deviceId])
  @@index([userId])
  @@map("review")
}

model Brand {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  name      String      @unique
  brandType BrandType[]
  devices   Device[]
  types     Type[]      @relation("BrandToType")

  @@map("brand")
}

model Type {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  name      String      @unique
  BrandType BrandType[]
  devices   Device[]
  brands    Brand[]     @relation("BrandToType")

  @@map("type")
}

model BrandType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  typeId    String
  brandId   String
  Brand     Brand    @relation(fields: [brandId], references: [id])
  type      Type     @relation(fields: [typeId], references: [id])

  @@unique([typeId, brandId])
  @@map("brand_type")
}

model FavoriteDevice {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId   String
  deviceId String

  user   User   @relation(fields: [userId], references: [id])
  device Device @relation(fields: [deviceId], references: [id])

  @@unique([userId, deviceId])
  @@map("favorite_device")
}

model ShippingInfo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @unique
  firstName String
  lastName  String
  phone     String
  country   String
  region    String
  zipCode   String
  city      String
  address   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("shipping_info")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String

  price     Int
  status    String
  delivery  String
  paymentId String?

  user      User        @relation(fields: [userId], references: [id])
  OrderItem OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  price    Int
  img      String
  quantity Int
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String
}
